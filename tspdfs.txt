import heapq

import numpy as np


class PuzzleState:
    def __init__(self, state, parent=None, move=None, cost=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.cost = cost
        self.heuristic = self.calculate_heuristic()

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

    def __eq__(self, other):
        return np.array_equal(self.state, other.state)

    def __hash__(self):
        return hash(tuple(self.state.flatten()))

    def calculate_heuristic(self):
        goal_state = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
        misplaced_tiles = np.sum(self.state != goal_state)
        return misplaced_tiles

    def get_next_states(self):
        blank_position = np.argwhere(self.state == 0)[0]
        possible_moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        next_states = []

        for move in possible_moves:
            new_position = blank_position + move
            if 0 <= new_position[0] < 3 and 0 <= new_position[1] < 3:
                new_state = np.copy(self.state)
                new_state[blank_position[0], blank_position[1]
                          ] = new_state[new_position[0], new_position[1]]
                new_state[new_position[0], new_position[1]] = 0
                next_states.append(PuzzleState(
                    new_state, self, move, self.cost + 1))

        return next_states


def a_star(initial_state):
    initial_node = PuzzleState(initial_state)
    open_set = [initial_node]
    closed_set = set()

    while open_set:
        current_node = heapq.heappop(open_set)

        if np.array_equal(current_node.state, np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])):
            path = []
            while current_node.parent:
                path.append((current_node.move, current_node.state))
                current_node = current_node.parent
            path.reverse()
            return path

        closed_set.add(current_node)

        next_states = current_node.get_next_states()
        for next_state in next_states:
            if next_state not in closed_set and next_state not in open_set:
                heapq.heappush(open_set, next_state)

    return None


def print_solution(path):
    for move, state in path:
        print(f"Move: {move}\n{np.array(state)}\n")


if __name__ == "__main__":
    # Example usage:
    initial_state = np.array([[1, 2, 3], [4, 0, 5], [6, 7, 8]])
    solution_path = a_star(initial_state)

    if solution_path:
        print_solution(solution_path)
    else:
        print("No solution found.")